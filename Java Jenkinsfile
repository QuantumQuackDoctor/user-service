pipeline {
    agent any
    tools{
        maven "Maven"
    }
    environment {
        AWS_REGION = 'us-east-2'
    }
    stages {
        stage('test') {
            steps {
                sh "mvn clean test"
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh "mvn sonar:sonar"    
                }    
            }    
        }
        stage('Quality Gate') {
            steps {
                waitForQualityGate abortPipeline= true
            }   
        }
        stage('Build') {
            steps {
                sh "mvn clean package -Dmaven.test.skip"
            }
        }
        stage('ECR Push') {
            steps {
                script {
                    withCredentials([string(credentialsId:'cfe0c5bd-0177-404d-83e1-bbb3044b52d0', variable:'AWS_ID')])
                    {
                        sh 'aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com'
                        sh 'docker build -t java-user-service .'
                        sh 'docker tag java-user-service:latest ${AWS_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/java-user-service:latest'
                        sh 'docker push ${AWS_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/java-user-service:latest'
                    }
                }
            }
        }
        stage('Template Update'){
            steps {
                sh 'aws cloudformation update-stack --stack-name JavaDevStack --use-previous-template'
            }
        }
    }
    post {
        success {
            script {
                sh 'docker image prune -f -a'
            }
        }
    }
}