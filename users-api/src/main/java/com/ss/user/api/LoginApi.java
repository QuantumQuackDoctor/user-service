/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ss.user.api;

import com.ss.user.errors.InvalidCredentialsException;
import com.ss.user.model.AuthRequest;
import com.ss.user.model.AuthResponse;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-07-01T14:52:34.175022700-06:00[America/Denver]")
@Validated
@Api(value = "login", description = "the login API")
public interface LoginApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /login : Login
     * Log in, resend verification email if not activated
     *
     * @param authRequest Authentication request (optional)
     * @return Authenticated (status code 200)
     *         or Invalid user (status code 400)
     *         or Account not activated (status code 401)
     */
    @ApiOperation(value = "Login", nickname = "postLogin", notes = "Log in, resend verification email if not activated", response = AuthResponse.class, tags={ "auth", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Authenticated", response = AuthResponse.class),
        @ApiResponse(code = 400, message = "Invalid user"),
        @ApiResponse(code = 401, message = "Account not activated", response = String.class) })
    @PostMapping(
        value = "/login",
        produces = { "application/json", "application/xml" },
        consumes = { "application/json", "application/xml" }
    )
    default ResponseEntity<AuthResponse> postLogin(@ApiParam(value = "Authentication request"  )  @Valid @RequestBody(required = false) AuthRequest authRequest) throws InvalidCredentialsException {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"jwt\" : \"jwt\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <jwt>aeiou</jwt> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
